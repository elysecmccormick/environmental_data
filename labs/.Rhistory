# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)
for(j in 1:length(sample_sizes))
{
# A sequence of equally-spaced x-values:
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sample_size_powers[j] = sum(p_vals < alpha) / n_sims
}
sim_sample_size =
data.frame(
sample_size = sample_sizes,
power       = sample_size_powers)
###########################################################################
# Adding the LOWESS Model
fit_lowess_50 = loess(power ~ sample_size, data = sim_sample_size, span = 0.5)
newdata_sample_size = data.frame(sample_size = seq(2, 20, length.out = 100))
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_50, newdata = newdata_sample_size),
type = "l",
ylab = "Statistical Power", xlab = "Sample Size")
###########################################################################
# Effect Size Power Analysis
alpha = 0.01
n_sims = 50
p_vals = numeric(n_sims)
n_effect_sizes = 20
effect_sizes = seq(-.01, .01, length.out = n_effect_sizes)
# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)
sample_sizes = seq(10, 50)
sim_output_2 = matrix(nrow = length(effect_sizes), ncol = length(sample_sizes))
for(k in 1:length(effect_sizes))
{
effect_size = effect_sizes[k]
for(j in 1:length(sample_sizes))
{
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = effect_size,
st_dev = sd_obs
)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sim_output_2[k, j] = sum(p_vals < alpha) / n_sims
}
print(paste0("computing effect size ", k," of ", length(effect_sizes)))
}
sim_n_effect_size =
list(
power = sim_output_2,
effect_size = effect_sizes,
sample_size = sample_sizes
)
###########################################################################
# Population Dispersion and Sample Size Analysis
alpha = 0.05
# Start with a small number
n_sims = 30
p_vals = numeric(n_sims)
# What was the observed standard deviation?
sd_obs
# specify the number of different standard deviation values to simulate:
# Start with a small number
n_sds = 20
pop_sds = seq(from = 0.05, to = 1.5, length.out = n_sds)
# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)
pop_sd_powers = numeric(length(pop_sds))
sample_sizes = seq(5, 100)
sim_output_3 = matrix(nrow = length(pop_sds), ncol = length(sample_sizes))
for(k in 1:length(pop_sds))
{
pop_sds_k = pop_sds[k]
for(j in 1:length(sample_sizes))
{
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = effect_size,
st_dev = pop_sds_k
)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sim_output_3[k, j] = sum(p_vals < alpha) / n_sims
}
print(paste0("Testing standard deviation ", k, " of ", n_sds))
}
image(sim_output_3)
sim_3_dat =
list(
power       = sim_output_3,
sample_size = sample_sizes,
pop_sd      = pop_sds)
# Adding the LOWESS Model
fit_lowess_30 = loess(power ~ sample_size, data = sim_sample_size, span = 0.3)
newdata_sample_size = data.frame(sample_size = seq(2, 20, length.out = 100))
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
ylab = "Statistical Power", xlab = "Sample Size")
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
ylab = "Statistical Power", xlab = "Sample Size")
points(
x = sim_3_dat$sample_size,
y = linear_simulator(
x = sim_3_dat$sample_size,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
),
col = "maroon2",
pch = 16)
legend(
"bottomleft",
legend = c("smoothed", "original"),
pch = 16,
col = "maroon2")
View(sim_3_dat)
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
ylab = "Statistical Power", xlab = "Sample Size")
points(
x = sim_3_dat$sample_size,
y = linear_simulator(
x = sim_3_dat$sample_size,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
),
col = "maroon2",
pch = 16)
rm(list = ls())
# Load packages
library(here)
# Load data
delomys_dat = read.csv(here("data", "delomys.csv"))
#Summary of the data, summary by column, and Shapiro tests for normality
summary(delomys_dat)
summary(delomys_dat$body_mass)
summary(delomys_dat$body_length)
shapiro.test(delomys_dat$body_mass)
shapiro.test(delomys_dat$body_length)
#Visualize with scatterplot
plot(x = delomys_dat$body_length, y = delomys_dat$body_mass,
main = "Delomys Body Length by Mass", xlab = "Body Length (cm)",
ylab = "Body Mass (g)", pch = 16, col = "lightsalmon3")
#Visualize with histograms
hist(x = delomys_dat$body_mass, main = "Delomys Body Mass",
xlab = "Body Mass (g)", col = "lightsalmon")
hist(x = delomys_dat$body_length, main = "Delomys Body Length",
xlab = "Body Mass (g)", col = "lightsalmon2")
#Visualize with boxplots
boxplot(body_mass ~ binomial, data = delomys_dat, xlab = "Species", ylab = "Body Mass (g)", col = "lightsalmon4")
boxplot(body_mass ~ sex, data = delomys_dat, xlab = "Sex", ylab = "Body Mass (g)", col = "lightsalmon3")
boxplot(body_mass ~ binomial*sex, data = delomys_dat, xlab = "Species", ylab = "Body Mass (g)", col = "lightsalmon4")
# Create linear models
fit1 <- lm(delomys_dat$body_length ~ delomys_dat$body_mass)
fit2 <- lm(delomys_dat$body_mass ~ delomys_dat$sex)
fit3 <- lm(delomys_dat$body_mass ~ delomys_dat$binomial)
fit4 <- lm(delomys_dat$body_mass ~ delomys_dat$sex + delomys_dat$binomial)
fit5 <- lm(delomys_dat$body_mass ~ delomys_dat$sex * delomys_dat$binomial)
# Residuals
fit1res <- residuals(fit1)
fit2res <- residuals(fit2)
fit3res <- residuals(fit3)
fit4res <- residuals(fit4)
fit5res <- residuals(fit5)
#Histogram of Residuals
hist(fit1res)
hist(fit2res)
hist(fit3res)
hist(fit4res)
hist(fit5res)
#Shapiro-Wilk Test for Normality on Residuals
shapiro.test(fit1res)
shapiro.test(fit2res)
shapiro.test(fit3res)
shapiro.test(fit4res)
shapiro.test(fit5res)
#Linear Regression summaries
summary(fit1)
summary(fit2)
summary(fit3)
summary(fit4)
summary(fit5)
anova(fit1)
anova(fit2)
anova(fit3)
anova(fit4)
anova(fit5)
knitr::kable(anova(fit1))
knitr::kable(anova(fit2))
knitr::kable(anova(fit3))
knitr::kable(anova(fit4))
knitr::kable(anova(fit5))
AIC(fit1)
AIC(fit2)
AIC(fit3)
AIC(fit4)
AIC(fit5)
knitr::opts_chunk$set(echo = TRUE)
dnorm(x = 2, mean = 2, sd = 4)
pnorm(q = 1.5, mean = 0, sd = 2, lower.tail = FALSE)
qnorm(p = 1.5, mean = 0, sd = 2, lower.tail = FALSE)
qnorm(p = 0.5, mean = 0, sd = 2, lower.tail = FALSE)
qnorm(p = 0.5, mean = 1, sd = 2, lower.tail = FALSE)
#pbinom() used to find 7 or fewer successes, when the sample size is 30 items, and the probability is 30%
pbinom( x = 7, size=30, prob=.3, lower.tail = FALSE)
#pbinom() used to find 7 or fewer successes, when the sample size is 30 items, and the probability is 30%
pbinom(7, size=30, prob=.3, lower.tail = FALSE)
dbinom(x = 7, size = 8, prob = .5)
#qbinom() used to find the 25th quantile in 30 trials with a probability of 40%
qbinom(.25, size=30, prob=.4)
#pbinom() used to find 7 or fewer successes, when the sample size is 30 items, and the probability is 30%
pbinom(7, size=30, prob=.3, lower.tail = FALSE)
knitr::opts_chunk$set(echo = TRUE)
# Clear Environment
rm(list = ls())
# Load packages
library(here)
# Load data
delomys_dat = read.csv(here("data", "delomys.csv"))
#Visualize with scatterplot
plot(x = delomys_dat$body_length, y = delomys_dat$body_mass,
main = "Delomys spp. Body Length by Mass", xlab = "Body Length (cm)",
ylab = "Body Mass (g)", pch = 16, col = "lightsalmon3")
# Clear Environment
rm(list = ls())
# Load packages
library(here)
# Load data
delomys_dat = read.csv(here("data", "delomys.csv"))
#Visualize with scatterplot
plot(x = delomys_dat$body_mass, y = delomys_dat$body_length,
main = "Delomys spp. Body Mass by Length", xlab = "Body Mass (g)",
ylab = "Body Length (cm)", pch = 16, col = "lightsalmon3")
#Visualize with histograms
par(mfrow = c(1,2))
hist(x = delomys_dat$body_mass, main = "Delomys Body Mass",
xlab = "Body Mass (g)", col = "lightsalmon")
hist(x = delomys_dat$body_length, main = "Delomys Body Length",
xlab = "Body Mass (g)", col = "lightsalmon2")
#Visualize with histograms
par(mfrow = c(1,2))
hist(x = delomys_dat$body_mass, main = "Delomys Body Mass",
xlab = "Body Mass (g)", col = "lightsalmon")
hist(x = delomys_dat$body_length, main = "Delomys Body Length",
xlab = "Body Mass (g)", col = "lightsalmon3")
# Clear Environment
rm(list = ls())
# Load packages
library(here)
# Load data
delomys_dat = read.csv(here("data", "delomys.csv"))
#Visualize with scatterplot
plot(x = delomys_dat$body_mass, y = delomys_dat$body_length,
main = "Delomys spp. Body Mass by Length", xlab = "Body Mass (g)",
ylab = "Body Length (cm)", pch = 16, col = "lightsalmon2")
#Visualize with histograms
par(mfrow = c(1,2))
hist(x = delomys_dat$body_mass, main = "Delomys spp. Body Mass",
xlab = "Body Mass (g)", col = "lightsalmon")
hist(x = delomys_dat$body_length, main = "Delomys spp. Body Length",
xlab = "Body Mass (g)", col = "lightsalmon3")
#Summary of the data, summary by column, and Shapiro tests for normality
summary(delomys_dat)
summary(delomys_dat$body_mass)
summary(delomys_dat$body_length)
shapiro.test(delomys_dat$body_mass)
shapiro.test(delomys_dat$body_length)
#Visualize with boxplots
boxplot(body_mass ~ binomial, data = delomys_dat, xlab = "Species", ylab = "Body Mass (g)", col = "lightsalmon4")
boxplot(body_mass ~ sex, data = delomys_dat, xlab = "Sex", ylab = "Body Mass (g)", col = "lightsalmon3")
boxplot(body_mass ~ binomial*sex, data = delomys_dat, xlab = "Species", ylab = "Body Mass (g)", col = "lightsalmon4")
#Visualize with boxplots
boxplot(body_mass ~ binomial, data = delomys_dat, xlab = "Species", ylab = "Body Mass (g)", col = "lightsalmon2")
boxplot(body_mass ~ sex, data = delomys_dat, xlab = "Sex", ylab = "Body Mass (g)", col = "lightsalmon3")
boxplot(body_mass ~ binomial*sex, data = delomys_dat, xlab = "Species", ylab = "Body Mass (g)", col = "lightsalmon4")
#Visualize with boxplots
boxplot(body_mass ~ binomial, data = delomys_dat, xlab = "Species", ylab = "Body Mass (g)", col = "lightsalmon2")
boxplot(body_mass ~ sex, data = delomys_dat, xlab = "Sex", ylab = "Body Mass (g)", col = "lightsalmon3")
boxplot(body_mass ~ binomial*sex, data = delomys_dat, xlab = "Species", ylab = "Body Mass (g)",
las = 2,
cex.axis= .7,
names = c("D.dors \n fem ", "D. sub \n fem",
"D. dors \n male ", "D.sub \n male"), col = "lightsalmon4")
View(delomys_dat)
#Visualize with boxplots
boxplot(body_mass ~ binomial, data = delomys_dat, xlab = "Species", ylab = "Body Mass (g)", col = "lightsalmon2")
boxplot(body_mass ~ sex, data = delomys_dat, xlab = "Sex", ylab = "Body Mass (g)", col = "lightsalmon3")
boxplot(body_mass ~ binomial*sex, data = delomys_dat, xlab = "Species", ylab = "Body Mass (g)",
las = 2,
cex.axis= .7,
names = c("D.dorsalis \n female ", "D. sublineatus \n female",
"D. dorsalis \n male ", "D.sublineatus \n male"), col = "lightsalmon4")
#Histogram of Residuals
par(mfrow = c(3,2))
hist(fit1res)
hist(fit2res)
hist(fit3res)
hist(fit4res)
hist(fit5res)
# Create linear models
fit1 <- lm(delomys_dat$body_length ~ delomys_dat$body_mass)
fit2 <- lm(delomys_dat$body_mass ~ delomys_dat$sex)
fit3 <- lm(delomys_dat$body_mass ~ delomys_dat$binomial)
fit4 <- lm(delomys_dat$body_mass ~ delomys_dat$sex + delomys_dat$binomial)
fit5 <- lm(delomys_dat$body_mass ~ delomys_dat$sex * delomys_dat$binomial)
# Residuals
fit1res <- residuals(fit1)
fit2res <- residuals(fit2)
fit3res <- residuals(fit3)
fit4res <- residuals(fit4)
fit5res <- residuals(fit5)
#Visualize with boxplots
boxplot(body_mass ~ binomial, data = delomys_dat, xlab = "Species", ylab = "Body Mass (g)", col = "lightsalmon2")
boxplot(body_mass ~ sex, data = delomys_dat, xlab = "Sex", ylab = "Body Mass (g)", col = "lightsalmon3")
boxplot(body_mass ~ binomial*sex, data = delomys_dat, xlab = "Species", ylab = "Body Mass (g)",
las = 2,
cex.axis= .7,
names = c("D.dorsalis \n female ", "D. sublineatus \n female",
"D. dorsalis \n male ", "D.sublineatus \n male"), col = c("lightsalmon", "lightsalmon2", "light salmon3", "lightsalmon4"))
#Visualize with boxplots
boxplot(body_mass ~ binomial, data = delomys_dat, xlab = "Species", ylab = "Body Mass (g)", col = c("salmon1","lightsalmon2"))
boxplot(body_mass ~ sex, data = delomys_dat, xlab = "Sex", ylab = "Body Mass (g)", col = c("sienna", "lightsalmon3"))
boxplot(body_mass ~ binomial*sex, data = delomys_dat, xlab = "Species", ylab = "Body Mass (g)",
las = 2,
cex.axis= .7,
names = c("D.dorsalis \n female ", "D. sublineatus \n female",
"D. dorsalis \n male ", "D.sublineatus \n male"), col = c("lightsalmon", "lightsalmon2", "light salmon3", "lightsalmon4"))
#Visualize with boxplots
boxplot(body_mass ~ binomial, data = delomys_dat, xlab = "Species", ylab = "Body Mass (g)", col = c("salmon4","lightsalmon2"))
boxplot(body_mass ~ sex, data = delomys_dat, xlab = "Sex", ylab = "Body Mass (g)", col = c("sienna", "lightsalmon3"))
boxplot(body_mass ~ binomial*sex, data = delomys_dat, xlab = "Species", ylab = "Body Mass (g)",
las = 2,
cex.axis= .7,
names = c("D.dorsalis \n female ", "D. sublineatus \n female",
"D. dorsalis \n male ", "D.sublineatus \n male"), col = c("lightsalmon", "lightsalmon2", "light salmon3", "lightsalmon4"))
#Visualize with boxplots
boxplot(body_mass ~ binomial, data = delomys_dat, xlab = "Species", ylab = "Body Mass (g)", col = c("salmon","lightsalmon2"))
boxplot(body_mass ~ sex, data = delomys_dat, xlab = "Sex", ylab = "Body Mass (g)", col = c("sienna", "lightsalmon3"))
boxplot(body_mass ~ binomial*sex, data = delomys_dat, xlab = "Species", ylab = "Body Mass (g)",
las = 2,
cex.axis= .7,
names = c("D.dorsalis \n female ", "D. sublineatus \n female",
"D. dorsalis \n male ", "D.sublineatus \n male"), col = c("lightsalmon", "lightsalmon2", "light salmon3", "lightsalmon4"))
#Visualize with boxplots
boxplot(body_mass ~ binomial, data = delomys_dat, xlab = "Species", ylab = "Body Mass (g)", col = c("salmon","lightsalmon4"))
boxplot(body_mass ~ sex, data = delomys_dat, xlab = "Sex", ylab = "Body Mass (g)", col = c("sienna", "lightsalmon3"))
boxplot(body_mass ~ binomial*sex, data = delomys_dat, xlab = "Species", ylab = "Body Mass (g)",
las = 2,
cex.axis= .7,
names = c("D.dorsalis \n female ", "D. sublineatus \n female",
"D. dorsalis \n male ", "D.sublineatus \n male"), col = c("lightsalmon", "lightsalmon2", "light salmon3", "lightsalmon4"))
#Visualize with boxplots
boxplot(body_mass ~ binomial, data = delomys_dat, xlab = "Species", ylab = "Body Mass (g)", col = c("salmon","lightsalmon4"))
boxplot(body_mass ~ sex, data = delomys_dat, xlab = "Sex", ylab = "Body Mass (g)", col = c("sienna", "lightsalmon3"))
boxplot(body_mass ~ binomial*sex, data = delomys_dat, xlab = "Species", ylab = "Body Mass (g)",
las = 2,
cex.axis= .7,
names = c("D.dorsalis \n female ", "D. sublineatus \n female",
"D. dorsalis \n male ", "D.sublineatus \n male"), col = c("salmon", "lightsalmon2", "light salmon3", "lightsalmon4"))
# Create linear models
fit1 <- lm(delomys_dat$body_length ~ delomys_dat$body_mass)
fit2 <- lm(delomys_dat$body_mass ~ delomys_dat$sex)
fit3 <- lm(delomys_dat$body_mass ~ delomys_dat$binomial)
fit4 <- lm(delomys_dat$body_mass ~ delomys_dat$sex + delomys_dat$binomial)
fit5 <- lm(delomys_dat$body_mass ~ delomys_dat$sex * delomys_dat$binomial)
# Residuals
fit1res <- residuals(fit1)
fit2res <- residuals(fit2)
fit3res <- residuals(fit3)
fit4res <- residuals(fit4)
fit5res <- residuals(fit5)
#Shapiro-Wilk Test for Normality on Residuals
shapiro.test(fit1res)
shapiro.test(fit2res)
shapiro.test(fit3res)
shapiro.test(fit4res)
shapiro.test(fit5res)
#None of these are normally distributed
#Linear Regression summaries
summary(fit1)
summary(fit2)
summary(fit3)
summary(fit4)
summary(fit5)
knitr::kable(anova(fit1))
knitr::kable(anova(fit2))
knitr::kable(anova(fit3))
knitr::kable(anova(fit4))
knitr::kable(anova(fit5))
# Create linear models
fit1 <- lm(delomys_dat$body_length ~ delomys_dat$body_mass)
fit2 <- lm(delomys_dat$body_mass ~ delomys_dat$sex)
fit3 <- lm(delomys_dat$body_mass ~ delomys_dat$binomial)
fit4 <- lm(delomys_dat$body_mass ~ delomys_dat$sex + delomys_dat$binomial)
fit5 <- lm(delomys_dat$body_mass ~ delomys_dat$sex * delomys_dat$binomial)
# Residuals
fit1res <- residuals(fit1)
fit2res <- residuals(fit2)
fit3res <- residuals(fit3)
fit4res <- residuals(fit4)
fit5res <- residuals(fit5)
#Shapiro-Wilk Test for Normality on Residuals
shapiro.test(fit1res)
shapiro.test(fit2res)
shapiro.test(fit3res)
shapiro.test(fit4res)
shapiro.test(fit5res)
#None of these are normally distributed
#Linear Regression summaries
summary(fit1)
summary(fit2)
summary(fit3)
summary(fit4)
summary(fit5)
knitr::kable(anova(fit1))
knitr::kable(anova(fit2))
knitr::kable(anova(fit3))
knitr::kable(anova(fit4))
knitr::kable(anova(fit5))
#AIC
AIC(fit1)
AIC(fit2)
AIC(fit3)
AIC(fit4)
AIC(fit5)
# Create linear models
fit1 <- lm(delomys_dat$body_length ~ delomys_dat$body_mass)
fit2 <- lm(delomys_dat$body_mass ~ delomys_dat$sex)
fit3 <- lm(delomys_dat$body_mass ~ delomys_dat$binomial)
fit4 <- lm(delomys_dat$body_mass ~ delomys_dat$sex + delomys_dat$binomial)
fit5 <- lm(delomys_dat$body_mass ~ delomys_dat$sex * delomys_dat$binomial)
# Residuals
fit1res <- residuals(fit1)
fit2res <- residuals(fit2)
fit3res <- residuals(fit3)
fit4res <- residuals(fit4)
fit5res <- residuals(fit5)
#Shapiro-Wilk Test for Normality on Residuals
shapiro.test(fit1res)
shapiro.test(fit2res)
shapiro.test(fit3res)
shapiro.test(fit4res)
shapiro.test(fit5res)
#None of these are normally distributed
#Linear Regression summaries
summary(fit1)
summary(fit2)
summary(fit3)
summary(fit4)
summary(fit5)
knitr::kable(anova(fit1))
knitr::kable(anova(fit2))
knitr::kable(anova(fit3))
knitr::kable(anova(fit4))
knitr::kable(anova(fit5))
76.12*0.8766
76.12 = (100 *0.8766)
76.12 + (100 *0.8766)
# Create linear models
fit1 <- lm(delomys_dat$body_length ~ delomys_dat$body_mass)
fit2 <- lm(delomys_dat$body_mass ~ delomys_dat$sex)
fit3 <- lm(delomys_dat$body_mass ~ delomys_dat$binomial)
fit4 <- lm(delomys_dat$body_mass ~ delomys_dat$sex + delomys_dat$binomial)
fit5 <- lm(delomys_dat$body_mass ~ delomys_dat$sex * delomys_dat$binomial)
# Residuals
fit1res <- residuals(fit1)
fit2res <- residuals(fit2)
fit3res <- residuals(fit3)
fit4res <- residuals(fit4)
fit5res <- residuals(fit5)
#Shapiro-Wilk Test for Normality on Residuals
shapiro.test(fit1res)
shapiro.test(fit2res)
shapiro.test(fit3res)
shapiro.test(fit4res)
shapiro.test(fit5res)
#None of these are normally distributed
#Linear Regression summaries
knitr::kable(coef(summary(fit1)))
knitr::kable(coef(summary(fit2)))
knitr::kable(coef(summary(fit3)))
knitr::kable(coef(summary(fit4)))
knitr::kable(coef(summary(fit5)))
