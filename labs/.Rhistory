fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = effect_size,
st_dev = pop_sds_k
)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sim_output_3[k, j] = sum(p_vals < alpha) / n_sims
}
print(paste0("Testing standard deviation ", k, " of ", n_sds))
}
image(sim_output_3)
sim_3_dat =
list(
power       = sim_output_3,
sample_size = sample_sizes,
pop_sd      = pop_sds)
alpha = 0.05
# Start with a small number
n_sims = 10
p_vals = numeric(n_sims)
# What was the observed standard deviation?
sd_obs
# specify the number of different standard deviation values to simulate:
# Start with a small number
n_sds = 20
pop_sds = seq(from = 0.05, to = 1.5, length.out = n_sds)
# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)
pop_sd_powers = numeric(length(pop_sds))
sample_sizes = seq(5, 100)
sim_output_3 = matrix(numeric(nrow = length(pop_sds),ncol = length(sample_sizes)))
sim_output_3 = matrix(numeric(nrow = length(pop_sds), ncol = length(sample_sizes)))
sim_output_3 = matrix(numeric(pop_sds, sample_sizes))
sim_output_3 = matrix(nrow = length(pop_sds), ncol = length(sample_sizes))
for(k in 1:length(pop_sds))
{
pop_sd_k = pop_sds[k]
for(j in 1:length(sample_sizes))
{
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = effect_size,
st_dev = pop_sds_k
)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sim_output_3[k, j] = sum(p_vals < alpha) / n_sims
}
print(paste0("Testing standard deviation ", k, " of ", n_sds))
}
pop_sd_k = pop_sds[k]
for(k in 1:length(pop_sds))
{
pop_sd_k = pop_sds[k]
for(j in 1:length(sample_sizes))
{
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = effect_size,
st_dev = pop_sds_k
)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sim_output_3[k, j] = sum(p_vals < alpha) / n_sims
}
print(paste0("Testing standard deviation ", k, " of ", n_sds))
}
image(sim_output_3)
sim_3_dat =
list(
power       = sim_output_3,
sample_size = sample_sizes,
pop_sd      = pop_sds)
for(k in 1:length(pop_sds))
pop_sd_k = pop_sds[k]
for(k in 1:length(pop_sds))
{
pop_sd_k = pop_sds[k]
for(j in 1:length(sample_sizes))
{
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = effect_size,
st_dev = pop_sds_k
)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sim_output_3[k, j] = sum(p_vals < alpha) / n_sims
}
print(paste0("Testing standard deviation ", k, " of ", n_sds))
}
for(k in 1:length(pop_sds))
{
pop_sd_k = pop_sds[k]
for(j in 1:length(sample_sizes))
{
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = effect_size,
st_dev = pop_sds_k
)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sim_output_3[k, j] = sum(p_vals < alpha) / n_sims
}
print(paste0("Testing standard deviation ", k, " of ", n_sds))
}
alpha = 0.05
# Start with a small number
n_sims = 10
p_vals = numeric(n_sims)
# What was the observed standard deviation?
sd_obs
# specify the number of different standard deviation values to simulate:
# Start with a small number
n_sds = 20
pop_sds = seq(from = 0.05, to = 1.5, length.out = n_sds)
# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)
pop_sd_powers = numeric(length(pop_sds))
sample_sizes = seq(5, 100)
sim_output_3 = matrix(nrow = length(pop_sds), ncol = length(sample_sizes))
for(k in 1:length(pop_sds))
{
pop_sd_k = pop_sds[k]
for(j in 1:length(sample_sizes))
{
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = effect_size,
st_dev = pop_sds_k
)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sim_output_3[k, j] = sum(p_vals < alpha) / n_sims
}
print(paste0("Testing standard deviation ", k, " of ", n_sds))
}
image(sim_output_3)
sim_3_dat =
list(
power       = sim_output_3,
sample_size = sample_sizes,
pop_sd      = pop_sds)
alpha = 0.05
# Start with a small number
n_sims = 10
p_vals = numeric(n_sims)
# What was the observed standard deviation?
sd_obs
# specify the number of different standard deviation values to simulate:
# Start with a small number
n_sds = 20
pop_sds = seq(from = 0.05, to = 1.5, length.out = n_sds)
# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)
pop_sd_powers = numeric(length(pop_sds))
sample_sizes = seq(5, 100)
sim_output_3 = matrix(nrow = length(pop_sds), ncol = length(sample_sizes))
for(k in 1:length(pop_sds))
{
pop_sds_k = pop_sds[k]
for(j in 1:length(sample_sizes))
{
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = effect_size,
st_dev = pop_sds_k
)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sim_output_3[k, j] = sum(p_vals < alpha) / n_sims
}
print(paste0("Testing standard deviation ", k, " of ", n_sds))
}
image(sim_output_3)
sim_3_dat =
list(
power       = sim_output_3,
sample_size = sample_sizes,
pop_sd      = pop_sds)
contour(
x = sim_3_dat$pop_sds,
y = sim_3_dat$sample_size,
z = sim_3_dat$power,
xlab = "Dispersion",
ylab = "sample size",
main = "Contour Plot of Disperson and Sample Size Statistical Power",
levels = seq(0, 1, length.out = 9),
drawlabels = TRUE,
# method = "simple")
method = "edge")
contour(
x = sim_3_dat$pop_sd,
y = sim_3_dat$sample_size,
z = sim_3_dat$power,
xlab = "Dispersion",
ylab = "sample size",
main = "Contour Plot of Disperson and Sample Size Statistical Power",
levels = seq(0, 1, length.out = 9),
drawlabels = TRUE,
# method = "simple")
method = "edge")
alpha = 0.05
# Start with a small number
n_sims = 10
p_vals = numeric(n_sims)
# What was the observed standard deviation?
sd_obs
# specify the number of different standard deviation values to simulate:
# Start with a small number
n_sds = 20
pop_sds = seq(from = 0.05, to = 1.5, length.out = n_sds)
# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)
pop_sd_powers = numeric(length(pop_sds))
sample_sizes = seq(5, 100)
sim_output_3 = matrix(nrow = length(pop_sds), ncol = length(sample_sizes))
for(k in 1:length(pop_sds))
{
pop_sds_k = pop_sds[k]
for(j in 1:length(sample_sizes))
{
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = effect_size,
st_dev = pop_sds_k
)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sim_output_3[k, j] = sum(p_vals < alpha) / n_sims
}
print(paste0("Testing standard deviation ", k, " of ", n_sds))
}
image(sim_output_3)
sim_3_dat =
list(
power       = sim_output_3,
sample_size = sample_sizes,
pop_sd      = pop_sds)
# You should save your simulation results so you don't have to run it every time.
save(
sim_3_dat,
file = here::here("data", "lab_ll_sim_output_dispersion_n_1000.RData"))
# Contour plot
contour(
x = sim_3_dat$pop_sd,
y = sim_3_dat$sample_size,
z = sim_3_dat$power,
xlab = "Dispersion",
ylab = "sample size",
main = "Contour Plot of Disperson and Sample Size Statistical Power",
levels = seq(0, 1, length.out = 9),
drawlabels = TRUE,
# method = "simple")
method = "edge")
alpha = 0.05
# Start with a small number
n_sims = 10
p_vals = numeric(n_sims)
# What was the observed standard deviation?
sd_obs
# specify the number of different standard deviation values to simulate:
# Start with a small number
n_sds = 20
pop_sds = seq(from = 0.05, to = 1.5, length.out = n_sds)
# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)
pop_sd_powers = numeric(length(pop_sds))
sample_sizes = seq(5, 100)
sim_output_3 = matrix(nrow = length(pop_sds), ncol = length(sample_sizes))
for(k in 1:length(pop_sds))
{
pop_sds_k = pop_sds[k]
for(j in 1:length(sample_sizes))
{
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = effect_size,
st_dev = pop_sds_k
)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sim_output_3[k, j] = sum(p_vals < alpha) / n_sims
}
print(paste0("Testing standard deviation ", k, " of ", n_sds))
}
image(sim_output_3)
sim_3_dat =
list(
power       = sim_output_3,
sample_size = sample_sizes,
pop_sd      = pop_sds)
# You should save your simulation results so you don't have to run it every time.
save(
sim_3_dat,
file = here::here("data", "lab_ll_sim_output_dispersion_n_1000.RData"))
# Contour plot
contour(
x = sim_3_dat$pop_sd,
y = sim_3_dat$sample_size,
z = sim_3_dat$power,
xlab = "Dispersion",
ylab = "sample size",
main = "Contour Plot of Disperson and Sample Size Statistical Power",
levels = seq(0, 1, length.out = 9),
drawlabels = TRUE,
# method = "simple")
method = "edge")
require("rgl")
persp3d(
x = sim_3_dat$pop_sd,
y = sim_3_dat$sample_size,
z = sim_3_dat$power,
xlab = "Dispersion", ylab = "Sample Size", zlab = "Power",
col = 'lightblue',
theta = 30, phi = 30, expand = 0.75,
ticktype = 'detailed')
require(htmlwidgets)
saveWidget(
rglwidget(),
file = here(
"data", "n_effect_size_power_sim_plot.html"),
selfcontained = TRUE
)
persp3d(
x = sim_3_dat$pop_sd,
y = sim_3_dat$sample_size,
z = sim_3_dat$power,
xlab = "Dispersion", ylab = "Sample Size", zlab = "Power",
col = 'lightblue',
theta = 30, phi = 30, expand = 0.75,
ticktype = 'detailed')
int_obs <- 0.0991
slope_obs <- 0.00584
sd_obs <- 0.141266779511046
alpha = 0.05
n_sims = 1000
p_vals = numeric(n_sims)
# What was the observed standard deviation?
sd_obs
# specify the number of different standard deviation values to simulate:
n_sds = 20
pop_sds = seq(from = 0.01, to = 1.5, length.out = n_sds)
pop_sd_powers = numeric(n_sds)
for(j in 1:n_sds)
{
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(x = birdhab$ls,
y_int = int_obs,
slope = slope_obs,
st_dev = pop_sds[j])
p_vals[i] = summary(fit_sim)$coefficients[2, "Pr(>|t|)"]
}
pop_sd_powers[j] = sum(p_vals < alpha) / n_sims
}
sim_output_dispersion = data.frame(
sd = pop_sds,
power = pop_sd_powers)
# Line plot of standard deviation (x-axis) and statistical power (y-axis)
# Add a dotted vertical red line at the observed population standard deviation value.
plot(power ~ sd, data = sim_output_dispersion,
type = 'l', xlab = 'Dispersion', ylab = 'Power')
abline(v = sd_obs, lty = 2, col = 'red')
linear_sim_fit = function(x, slope, y_int, st_dev)
{
y_sim = linear_simulator(
x = x,
y_int = y_int,
slope = slope,
st_dev = st_dev
)
fit_sim = lm(y_sim ~ x)
return(fit_sim)
}
int_obs <- 0.0991
slope_obs <- 0.00584
sd_obs <- 0.141266779511046
alpha = 0.05
n_sims = 1000
p_vals = numeric(n_sims)
# What was the observed standard deviation?
sd_obs
# specify the number of different standard deviation values to simulate:
n_sds = 20
pop_sds = seq(from = 0.01, to = 1.5, length.out = n_sds)
pop_sd_powers = numeric(n_sds)
for(j in 1:n_sds)
{
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(x = birdhab$ls,
y_int = int_obs,
slope = slope_obs,
st_dev = pop_sds[j])
p_vals[i] = summary(fit_sim)$coefficients[2, "Pr(>|t|)"]
}
pop_sd_powers[j] = sum(p_vals < alpha) / n_sims
}
sim_output_dispersion = data.frame(
sd = pop_sds,
power = pop_sd_powers)
# Line plot of standard deviation (x-axis) and statistical power (y-axis)
# Add a dotted vertical red line at the observed population standard deviation value.
plot(power ~ sd, data = sim_output_dispersion,
type = 'l', xlab = 'Dispersion', ylab = 'Power')
abline(v = sd_obs, lty = 2, col = 'red')
require(here)
dat_bird = read.csv(
here("data", "bird.sub.csv")
)
head(dat_bird)
dat_hab = read.csv(
here("data", "hab.sub.csv")
)
head(dat_hab)
birdhab <- data.frame(merge(dat_bird, dat_hab))
head(birdhab)
linear = function(x, y_int, slope)
{
return(y_int + x * slope)
}
linear_simulator = function(x, y_int, slope, st_dev)
{
y <- linear(x, y_int, slope)
n <- length(x)
noise <- rnorm(n, mean = 0, sd = st_dev)
return(y + noise)
}
linear_sim_fit = function(x, slope, y_int, st_dev)
{
y_sim = linear_simulator(
x = x,
y_int = y_int,
slope = slope,
st_dev = st_dev
)
fit_sim = lm(y_sim ~ x)
return(fit_sim)
}
int_obs <- 0.0991
slope_obs <- 0.00584
sd_obs <- 0.141266779511046
alpha = 0.05
n_sims = 1000
p_vals = numeric(n_sims)
# What was the observed standard deviation?
sd_obs
# specify the number of different standard deviation values to simulate:
n_sds = 20
pop_sds = seq(from = 0.01, to = 1.5, length.out = n_sds)
pop_sd_powers = numeric(n_sds)
for(j in 1:n_sds)
{
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(x = birdhab$ls,
y_int = int_obs,
slope = slope_obs,
st_dev = pop_sds[j])
p_vals[i] = summary(fit_sim)$coefficients[2, "Pr(>|t|)"]
}
pop_sd_powers[j] = sum(p_vals < alpha) / n_sims
}
sim_output_dispersion = data.frame(
sd = pop_sds,
power = pop_sd_powers)
# Line plot of standard deviation (x-axis) and statistical power (y-axis)
# Add a dotted vertical red line at the observed population standard deviation value.
plot(power ~ sd, data = sim_output_dispersion,
type = 'l', xlab = 'Dispersion', ylab = 'Power')
abline(v = sd_obs, lty = 2, col = 'red')
