# Presence/absence data, translucent points:
plot(
GCKI_pres ~ slope, data = dat_all,
xlab = "Percent Slope",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = blues9(0, 0.2)
)
# Presence/absence data, translucent points:
plot(
GCKI_pres ~ slope, data = dat_all,
xlab = "Percent Slope",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = "blue"
)
lines(GCKI_predicted ~ slope, data = slope_newdata)
plot(
GCKI_pres ~ ba.tot, data = dat_all,
xlab = "Basal Area",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray9(0, 0.2)
)
plot(
GCKI_pres ~ ba.tot, data = dat_all,
xlab = "Basal Area",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
plot(
GCKI_pres ~ ba.tot, data = dat_all,
xlab = "Basal Area",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = blue(0, 0.2)
)
par(mfrow = c(2, 1))
# Presence/absence data, translucent points:
plot(
GCKI_pres ~ slope, data = dat_all,
xlab = "Percent Slope",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(GCKI_predicted ~ slope, data = slope_newdata)
plot(
GCKI_pres ~ ba.tot, data = dat_all,
xlab = "Basal Area",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
par(mfrow = c(2, 1))
# Presence/absence data, translucent points:
plot(
GCKI_pres ~ slope, data = dat_all,
xlab = "Percent Slope",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(GCKI_predicted ~ slope, data = slope_newdata)
plot(
GCKI_pres ~ ba.tot, data = dat_all,
xlab = "Basal Area",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(GCKI_predicted ~ ba.tot, data = ba_newdata)
par(mfrow = c(2, 1))
# Presence/absence data, translucent points:
plot(
GCKI_pres ~ slope, data = dat_all,
xlab = "Percent Slope",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(GCKI_predicted ~ slope, data = slope_newdata)
plot(
GCKI_pres ~ ba.tot, data = dat_all,
xlab = "Basal Area",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(GCKI_predicted ~ ba.tot, data = ba_newdata)
ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n)
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n)
# Create a color ramp function using heat colors
colorfunc = colorRampPalette(
heat.colors(length(ba.tot)))
# Figure out the indices of the color ramp
col_indices_GCKI_add = findInterval(
new_dat_all$pred_add,
seq(
min(new_dat_all$pred_add),
max(new_dat_all$pred_add),
length.out = 50))
rgl::persp3d(
x = ba.tot,
y = slope,
z = z_GCKI_add,
xlab = "Basal Area",
ylab = "Slope",
zlab = "Pr(present)",
alpha = 0.9,
col = colorfunc(50)[col_indices_GCKI_add]
)
# Create a color ramp function using heat colors
colorfunc = colorRampPalette(
heat.colors(length(ba.tot)))
# Figure out the indices of the color ramp
col_indices_GCKI_add = findInterval(
new_dat_all$pred_add,
seq(
min(new_dat_all$pred_add),
max(new_dat_all$pred_add),
length.out = 50))
rgl::persp3d(
x = ba.tot,
y = slope,
z = z_GCKI_add,
xlab = "Basal Area",
ylab = "Slope",
zlab = "Pr(present)",
alpha = 0.9,
col = colorfunc(50)[col_indices_GCKI_add]
)
rglwidget()
n = 50
ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n)
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n)
new_dat_all = expand.grid(
ba.tot = ba.tot,
slope = slope)
head(new_dat_all)
tail(new_dat_all)
new_dat_all$pred_add = predict(
fit_GCKI_both_additive,
newdata = new_dat_all,
type = "response")
z_GCKI_add = matrix(
new_dat_all$pred_add,
nrow = length(ba.tot),
byrow = FALSE)
z_GCKI_int = matrix(
new_dat_all$pred_int,
nrow = length(ba.tot),
byrow = FALSE)
require(rgl)
rgl::persp3d(
x = ba.tot,
y = slope,
z = z_GCKI_add,
col = "steelblue",
xlab = "Basal Area",
ylab = "Slope",
zlab = "Pr(present)",
alpha = 0.4)
rglwidget()
n = 50
ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n)
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n)
# I can take advantage of the expand.grid() function to make a data.frame
# that contains every combination of the two predictors:
new_dat_all = expand.grid(
ba.tot = ba.tot,
slope = slope)
head(new_dat_all)
tail(new_dat_all)
# I can use predict() to make a vector of model predictions:
new_dat_all$pred_add = predict(
fit_GCKI_both_additive,
newdata = new_dat_all,
type = "response")
# The contour and 3D plotting methods require matrices for the data on the z-axis:
z_GCKI_add = matrix(
new_dat_all$pred_add,
nrow = length(ba.tot),
byrow = FALSE)
z_GCKI_int = matrix(
new_dat_all$pred_int,
nrow = length(ba.tot),
byrow = FALSE)
z_GCKI_add = matrix(
new_dat_all$pred_add,
nrow = length(ba.tot),
byrow = FALSE)
z_GCKI_int = matrix(
new_dat_all$pred_int,
nrow = length(ba.tot),
byrow = FALSE)
n = 50
ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n)
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n)
new_dat_all = expand.grid(
ba.tot = ba.tot,
slope = slope)
head(new_dat_all)
tail(new_dat_all)
new_dat_all$pred_add = predict(
fit_GCKI_both_additive,
newdata = new_dat_all,
type = "response")
z_GCKI_add = matrix(
new_dat_all$pred_add,
nrow = length(ba.tot),
byrow = FALSE)
z_GCKI_int = matrix(
new_dat_all$pred_int,
nrow = length(ba.tot),
byrow = FALSE)
require(rgl)
rgl::persp3d(
x = ba.tot,
y = slope,
z = z_GCKI_add,
col = "steelblue",
xlab = "Basal Area",
ylab = "Slope",
zlab = "Pr(present)",
alpha = 0.4)
rglwidget()
par(mfrow = c(1, 2))
contour(
x = ba.tot, y = slope,
z = z_GCKI_add,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Additive")
contour(
x = ba.tot,
y = slope,
z = z_GCKI_int,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Interactive")
Copy
# Create a color ramp function using heat colors
colorfunc = colorRampPalette(
heat.colors(length(ba.tot)))
# Figure out the indices of the color ramp
col_indices_GCKI_add = findInterval(
new_dat_all$pred_add,
seq(
min(new_dat_all$pred_add),
max(new_dat_all$pred_add),
length.out = 50))
rgl::persp3d(
x = ba.tot,
y = slope,
z = z_GCKI_add,
xlab = "Basal Area",
ylab = "Slope",
zlab = "Pr(present)",
alpha = 0.9,
col = colorfunc(50)[col_indices_GCKI_add]
)
rglwidget()
n = 50
ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n)
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n)
# I can take advantage of the expand.grid() function to make a data.frame
# that contains every combination of the two predictors:
new_dat_all = expand.grid(
ba.tot = ba.tot,
slope = slope)
head(new_dat_all)
tail(new_dat_all)
new_dat_all$pred_add = predict(
fit_GCKI_both_additive,
newdata = new_dat_all,
type = "response")
z_GCKI_add = matrix(
new_dat_all$pred_add,
nrow = length(ba.tot),
byrow = FALSE)
# Create a color ramp function using heat colors
colorfunc = colorRampPalette(
heat.colors(length(ba.tot)))
# Figure out the indices of the color ramp
col_indices_GCKI_add = findInterval(
new_dat_all$pred_add,
seq(
min(new_dat_all$pred_add),
max(new_dat_all$pred_add),
length.out = 50))
rgl::persp3d(
x = ba.tot,
y = slope,
z = z_GCKI_add,
xlab = "Basal Area",
ylab = "Slope",
zlab = "Pr(present)",
alpha = 0.9,
col = colorfunc(50)[col_indices_GCKI_add]
)
rglwidget()
#Both require() and library() will load packages
require(here)
library(palmerpenguins)
# Both require() and library() will load packages
require(here)
library(palmerpenguins)
# Loading Data
ginkgo_dat = read.csv(
here("data", "ginkgo_data_2022.csv")
)
head(ginkgo_dat)
View(ginkgo_dat)
knitr::opts_chunk$set(echo = TRUE)
## Typing the name of the vector into the console prints the contents
num_vec
## Create a vector of numbers:
num_vec  = c(1, 4, 8, 9, 13)
## Create a vector of characters:
char_vec = c("a", "fish", "data is cool")
## Typing the name of the vector into the console prints the contents
num_vec
## The print() function accomplishes the same task:
print(char_vec)
help("length")
length(num_vec)
length(num_vec)
help("matrix")
matrix(data = num_vec, nrow = 1, ncol = 1, byrow = FALSE)
matrix(data = num_vec, nrow = 2, ncol = 2, byrow = FALSE)
matrix(data = num_vec, nrow = 1, ncol = 2, byrow = FALSE)
matrix(data = num_vec, nrow = 2, ncol = 2, byrow = FALSE)
# nrow is the number of rows you want
# ncol is the number of columsn you want
matrix(data = num_vec, nrow = 2, ncol = 2)
help("data.frame")
ginkgo_data <- data.frame(ginkgo_dat)
View(ginkgo_dat)
ginkgo_data <- data.frame(ginkgo_dat)
help("nrow")
nrow(ginkgo_data)
ncol(ginkgo_data)
dim(ginkgo_data)
help("dim")
ginkgo_data$seeds_present
ginkgo_data$max_width
require(palmerpenguins)
dat_pen = droplevels(subset(penguins, species == "Adelie"))
View(dat_pen)
View(ginkgo_data)
ginkgo_data[2,3]
ginkgo_data[1,]
ginkgo_data[,3]
summary(palmerpenguins)
summary(ginkgo_data)
mean(ginkgo_data$max_depth)
sd(ginkgo_data$max_depth)
plot(x = gingko_data$max_depth y = ginkgo_data$max_width,
pch = 8, col = "gold", main = "Ginkgo Leaf Dimensions" )
plot(x = gingko_data$max_depth, y = ginkgo_data$max_width,
pch = 8, col = "gold", main = "Ginkgo Leaf Dimensions" )
plot(x = ginkgo_data$max_depth, y = ginkgo_data$max_width,
pch = 8, col = "gold", main = "Ginkgo Leaf Dimensions" )
plot(x = ginkgo_data$max_depth, y = ginkgo_data$max_width,
xlim = 120, ylim = 120, xlab = "Maximum Leaf Depth",
ylab = "Maximum Leaf Width", main = "Ginkgo Leaf Dimensions",
pch = 8, col = "gold")
plot(x = ginkgo_data$max_depth, y = ginkgo_data$max_width,
xlim = 140, ylim = 120, xlab = "Maximum Leaf Depth",
ylab = "Maximum Leaf Width", main = "Ginkgo Leaf Dimensions",
pch = 8, col = "gold")
plot(x = ginkgo_data$max_depth, y = ginkgo_data$max_width,
xlim = NULL, ylim = 120, xlab = "Maximum Leaf Depth",
ylab = "Maximum Leaf Width", main = "Ginkgo Leaf Dimensions",
pch = 8, col = "gold")
plot(x = ginkgo_data$max_depth, y = ginkgo_data$max_width,
xlim = NULL, ylim = NULL, xlab = "Maximum Leaf Depth",
ylab = "Maximum Leaf Width", main = "Ginkgo Leaf Dimensions",
pch = 8, col = "gold")
help("cex")
plot(x = ginkgo_data$max_depth, y = ginkgo_data$max_width,
xlim = NULL, ylim = NULL, xlab = "Maximum Leaf Depth (cm)",
ylab = "Maximum Leaf Width (cm)", main = "Ginkgo Leaf Dimensions",
pch = 8, cex = 1, col = "gold")
??cex
plot(x = ginkgo_data$max_depth, y = ginkgo_data$max_width,
xlim = NULL, ylim = NULL, xlab = "Maximum Leaf Depth (cm)",
ylab = "Maximum Leaf Width (cm)", main = "Ginkgo Leaf Dimensions",
pch = 8, cex = 1, col = "gold")
plot(x = ginkgo_data$max_depth, y = ginkgo_data$max_width,
xlim = NULL, ylim = NULL, xlab = "Maximum Leaf Depth (cm)",
ylab = "Maximum Leaf Width (cm)", main = "Ginkgo Leaf Dimensions",
pch = 8, cex = 1, col = "gold")
require(palmerpenguins)
dat_pen <- palmerpenguins::penguins
View(ginkgo_dat)
hist(dat_pen$flipper_length_mm, xlab = "Flipper Length (mm)", main = "Histogram of Penguin Flipper length ",
col = "slateblue1")
require(palmerpenguins)
dat_pen <- palmerpenguins::penguins
hist(dat_pen$flipper_length_mm, xlab = "Flipper Length (mm)", main = "Histogram of Penguin Flipper length ",
col = "slateblue")
hist(dat_pen$flipper_length_mm, xlab = "Flipper Length (mm)", main = "Histogram of Penguin Flipper length ",
col = "skyblue")
help("breaks")
hist(dat_pen$flipper_length_mm, breaks = 5, xlab = "Flipper Length (mm)", main = "Histogram of Penguin Flipper length ",
col = "skyblue")
hist(dat_pen$flipper_length_mm, breaks = 4, xlab = "Flipper Length (mm)", main = "Histogram of Penguin Flipper length ",
col = "skyblue")
hist(dat_pen$flipper_length_mm, breaks = 5, xlab = "Flipper Length (mm)", main = "Histogram of Penguin Flipper length ",
col = "skyblue")
require(palmerpenguins)
dat_pen <- palmerpenguins::penguins
hist(dat_pen$flipper_length_mm, breaks = 5, xlab = "Flipper Length (mm)", main = "Histogram of Penguin Flipper length ",
col = "skyblue")
require(palmerpenguins)
dat_pen <- palmerpenguins::penguins
hist(dat_pen$flipper_length_mm, breaks = 5, xlab = "Flipper Length (mm)", main = "Histogram of Penguin Flipper length ",
col = "skyblue")
require(palmerpenguins)
dat_pen <- palmerpenguins::penguins
hist(dat_pen$flipper_length_mm, breaks = 5, xlab = "Flipper Length (mm)", main = "Histogram of Penguin Flipper Length ",
col = "skyblue")
View(ginkgo_data)
#conditional
boxplot(formula = max_width ~ seeds_present, data = ginkgo_data, main = "Ginkgo",
xlab = "Seed Presence", ylab = "Maximum Width (cm)", col = "gold")
#conditional
boxplot(formula = max_width ~ seeds_present, data = ginkgo_data, main = "Ginkgo Leaf Width Explained by Seed Presence",
xlab = "Seed Presence", ylab = "Maximum Width (cm)", col = "gold")
#boxplot
boxplot(ginkgo_data$petiole_length, main = "Ginkgo Petiole Lengths", xlab = "", ylab = "Petiole Length", col = "springgreen4")
par(mfrow(1,1))
par(mfrow = c(1,1))
boxplot(ginkgo_data$petiole_length, main = "Ginkgo Petiole Lengths", xlab = "", ylab = "Petiole Length", col = "springgreen4")
boxplot(formula = max_width ~ seeds_present, data = ginkgo_data, main = "Ginkgo Leaf Width Explained by Seed Presence",
xlab = "Seed Presence", ylab = "Maximum Width (cm)", col = "gold")
par(mfrow = c(1,2))
boxplot(ginkgo_data$petiole_length, main = "Ginkgo Petiole Lengths", xlab = "", ylab = "Petiole Length", col = "springgreen4")
boxplot(formula = max_width ~ seeds_present, data = ginkgo_data, main = "Ginkgo Leaf Width Explained by Seed Presence",
xlab = "Seed Presence", ylab = "Maximum Width (cm)", col = "gold")
boxplot(ginkgo_data$petiole_length, main = "Ginkgo Petiole Lengths", xlab = "", ylab = "Petiole Length", col = "springgreen3")
boxplot(ginkgo_data$petiole_length, main = "Ginkgo Petiole Lengths", xlab = "", ylab = "Petiole Length", col = "springgreen2")
par(mfrow = c(1,2))
boxplot(ginkgo_data$petiole_length, main = "Ginkgo Petiole Lengths", xlab = "", ylab = "Petiole Length", col = "springgreen3")
boxplot(formula = max_width ~ seeds_present, data = ginkgo_data, main = "Ginkgo Leaf Width Explained by Seed Presence",
xlab = "Seed Presence", ylab = "Maximum Width (cm)", col = "gold")
par(mfrow = c(1,2))
boxplot(ginkgo_data$petiole_length, main = "Ginkgo Petiole Lengths", xlab = "", ylab = "Petiole Length", col = "springgreen3")
boxplot(formula = max_width ~ seeds_present, data = ginkgo_data, main = "Ginkgo Leaf Width Explained by Seed Presence",
xlab = "Seed Presence", ylab = "Maximum Width (cm)", col = "gold")
par(mfrow = c(1,2))
boxplot(ginkgo_data$petiole_length, main = "Ginkgo Petiole Lengths", xlab = "", ylab = "Petiole Length", col = "springgreen3")
boxplot(formula = max_width ~ seeds_present, data = ginkgo_data, main = "Ginkgo Leaf Width Explained by Seed Presence",
xlab = "Seed Presence", ylab = "Maximum Width (cm)", col = "gold")
par(mfrow = c(1,2))
boxplot(ginkgo_data$petiole_length, main = "Ginkgo Petiole Lengths", xlab = "", ylab = "Petiole Length", col = "springgreen3")
boxplot(formula = max_width ~ seeds_present, data = ginkgo_data, main = "Ginkgo Leaf Width By Seed Presence",
xlab = "Seed Presence", ylab = "Maximum Width (cm)", col = "gold")
par(mfrow = c(1,2))
boxplot(ginkgo_data$petiole_length, main = "Ginkgo Petiole Lengths", xlab = "", ylab = "Petiole Length", col = "springgreen3")
boxplot(formula = max_width ~ seeds_present, data = ginkgo_data, main = "Ginkgo Leaf Width By Seeds Present",
xlab = "Seed Presence", ylab = "Maximum Width (cm)", col = "gold")
par(mfrow = c(1,2))
boxplot(ginkgo_data$petiole_length, main = "Ginkgo Petiole Lengths", xlab = "", ylab = "Petiole Length (cm) ", col = "springgreen3")
boxplot(formula = max_width ~ seeds_present, data = ginkgo_data, main = "Ginkgo Leaf Width by Seeds Present",
xlab = "Seed Presence", ylab = "Maximum Width (cm)", col = "gold")
par(mfrow = c(1,2))
boxplot(ginkgo_data$petiole_length, main = "Ginkgo Petiole Lengths", xlab = "", ylab = "Petiole Length (cm) ", col = "springgreen3")
boxplot(formula = max_width ~ seeds_present, data = ginkgo_data, main = "Ginkgo Leaf Width by Seed Presence",
xlab = "Seed Presence", ylab = "Maximum Width (cm)", col = "gold")
par(mfrow = c(1,2))
boxplot(ginkgo_data$petiole_length, main = "Ginkgo Petiole Lengths", xlab = "", ylab = "Petiole Length (cm) ", col = "springgreen3")
boxplot(formula = max_width ~ seeds_present, data = ginkgo_data, main = "Leaf Width by Seed Presence",
xlab = "Seed Presence", ylab = "Maximum Width (cm)", col = "gold")
View(dat_pen)
par(mfrow = c(2,2))
hist(dat_pen$body_mass_g, breaks = 5, xlab = "Body Mass (g)", main = "Histogram of Penguin Body Mass",
col = "midnightblue")
hist(dat_pen$bill_length_mm, breaks = 5, xlab = "Bill Length (mm)", main = "Histogram of Penguin Bill length ",
col = "skyblue")
hist(dat_pen$bill_depth_mm, breaks = 5, xlab = "Flipper Length (mm)", main = "Histogram of Penguin Bill Depth ",
col = "royalblue1")
hist(dat_pen$flipper_length_mm, breaks = 5, xlab = "Flipper Length (mm)", main = "Histogram of Penguin Flipper length ",
col = "steelblue")
dnorm(x, mean = 10.4, sd = 2.4)
x = seq(0.8, 20, length.out = 1000)
dnorm(x, mean = 10.4, sd = 2.4)
pnorm(x, mean = 10.4, sd = 2.4)
qnorm(x, mean = 10.4, sd = 2.4)
rnorm(x, mean = 10.4, sd = 2.4)
