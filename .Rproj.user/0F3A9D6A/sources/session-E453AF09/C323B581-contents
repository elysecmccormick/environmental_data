---
title: 'Lab 11: Simulation and Power Analysis'
author: "Elyse McCormick"
date: "`r Sys.Date()`"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

**Q1 (2 pts.): Include a figure of your line plot in your report.**

```{r echo=FALSE}

require(here)

dat_bird = read.csv(
  here("data", "bird.sub.csv")
)
head(dat_bird)

dat_hab = read.csv(
  here("data", "hab.sub.csv")
)
head(dat_hab)

birdhab <- data.frame(merge(dat_bird, dat_hab))
head(birdhab)

linear = function(x, y_int, slope)
{
      return(y_int + x * slope)
}

linear_simulator = function(x, y_int, slope, st_dev)
{
  y <- linear(x, y_int, slope)
  n <- length(x)
  noise <- rnorm(n, mean = 0, sd = st_dev)
  
    return(y + noise)
}

linear_sim_fit = function(x, slope, y_int, st_dev)
{
  y_sim = linear_simulator(
    x = x,
    y_int = y_int,
    slope = slope,
    st_dev = st_dev
  )
  fit_sim = lm(y_sim ~ x)
  return(fit_sim)
}

int_obs <- 0.0991
slope_obs <- 0.00584
sd_obs <- 0.141266779511046

alpha = 0.05
n_sims = 1000
p_vals = numeric(n_sims)

# What was the observed standard deviation?
sd_obs

# specify the number of different standard deviation values to simulate:
n_sds = 20
pop_sds = seq(from = 0.01, to = 1.5, length.out = n_sds)

pop_sd_powers = numeric(n_sds)

for(j in 1:n_sds)
{
    for(i in 1:n_sims)
  {
    fit_sim = linear_sim_fit(x = birdhab$ls,
                             y_int = int_obs,
                             slope = slope_obs,
                             st_dev = pop_sds[j])
    p_vals[i] = summary(fit_sim)$coefficients[2, "Pr(>|t|)"]
  }
  pop_sd_powers[j] = sum(p_vals < alpha) / n_sims
}

sim_output_dispersion = data.frame(
  sd = pop_sds,
  power = pop_sd_powers)

# Line plot of standard deviation (x-axis) and statistical power (y-axis)
# Add a dotted vertical red line at the observed population standard deviation value.

plot(power ~ sd, data = sim_output_dispersion,
     type = 'l', xlab = 'Dispersion', ylab = 'Power')
abline(v = sd_obs, lty = 2, col = 'red')
```


**Q2 (2 pts.): Why do you think that statistical power decreases as population dispersion increases?**

Because there's more variation. If there's a high amount of variation, then statistical power isn't centering on a mean, which indicates your data are dissimilar, ultimately decreasing your statistical power and confidence.

**Q3 (2 pts.): Include a figure of your contour plot in your report.**

```{r}
alpha = 0.05
effect_size = 0.01

# Start with a small number
n_sims = 10
p_vals = numeric(n_sims)

# What was the observed standard deviation?
sd_obs

# specify the number of different standard deviation values to simulate:
# Start with a small number
n_sds = 20
pop_sds = seq(from = 0.05, to = 1.5, length.out = n_sds)

# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)

pop_sd_powers = numeric(length(pop_sds))

sample_sizes = seq(5, 100)

sim_output_3 = matrix(nrow = length(pop_sds), ncol = length(sample_sizes))


for(k in 1:length(pop_sds))
{
  pop_sds_k = pop_sds[k]
  
  for(j in 1:length(sample_sizes))
  {
    x_vals = seq(0, max_x, length.out = sample_sizes[j])
    
    for(i in 1:n_sims)
    {
      fit_sim = linear_sim_fit(
        x = x_vals,
        y_int = int_obs,
        slope = effect_size,
        st_dev = pop_sds_k
      )
      p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
    }
    
    sim_output_3[k, j] = sum(p_vals < alpha) / n_sims
  }
  print(paste0("Testing standard deviation ", k, " of ", n_sds))
}

image(sim_output_3)

sim_3_dat = 
  list(
    power       = sim_output_3,
    sample_size = sample_sizes,
    pop_sd      = pop_sds)


# You should save your simulation results so you don't have to run it every time.
save(
  sim_3_dat, 
  file = here::here("data", "lab_ll_sim_output_dispersion_n_1000.RData"))

# Contour plot

contour(
  x = sim_3_dat$pop_sd,
  y = sim_3_dat$sample_size,
  z = sim_3_dat$power,
  xlab = "Dispersion",
  ylab = "sample size",
  main = "Contour Plot of Disperson and Sample Size Statistical Power",
  levels = seq(0, 1, length.out = 9),
  drawlabels = TRUE,
  # method = "simple")
  method = "edge")

```

**Q4 (2 pts.): Qualitatively describe the patterns you see in the contour plot. Make sure you discuss the effects of sample size and population dispersion on statistical power.**

I'm not entirely sure that this is an accurate representation of the data, because it looks dissimilar to the contour plot from the walkthrough. But it looks to me, based on both the heat map plot and the contour plot, that the higher the sample size, the lower the dispersion. This intuitively makes sense based on the assumptions of the central limit theorem, if your sample size increases the variation should decrease, and you should have higher confidence in your data based on this. 

**Q5 (5 pts.): Upload your plot as an interactive html html file. NOTE: some Mac users are not able to use RGL. You may also upload a static plot created with persp() if you canâ€™t get RGL to work on your computer.**

```{r}

require("rgl")

persp3d(
  x = sim_3_dat$pop_sd,
  y = sim_3_dat$sample_size,
  z = sim_3_dat$power,
  xlab = "Dispersion", ylab = "Sample Size", zlab = "Power",
  col = 'lightblue',
  theta = 30, phi = 30, expand = 0.75,
  ticktype = 'detailed')
```

**Q6 (2 pts.): Describe how you could use the information shown in your plot when designing an experiment.**

I think this is useful when trying to understand why you may need a high sample size in your experimental design. This would indicate that increased sample size won't eliminate your variation, but it will reduce it and increase the power of your design. 












